calculPageRank(pageRank = pageRank)
article422908 <- t(m["422908",])
article422908
calculPageRank <- function(pageRank = pageRank)
{
for (i in 1:20)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
}
calculPageRank <- function(pageRank = pageRank)
{
for (i in 1:3)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
}
calculPageRank(pageRank = pageRank)
article422908 <- t(m["422908",])
article422908
for (i in 1:3)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
article422908 <- t(m["422908",])
article422908
pageRank <- matrix(1.0, nrow = nrow(m), ncol = ncol(m))
rownames(pageRank) <- rownames(m)
colnames(pageRank) <- colnames(m)
dVector <- rep(d, N)
# Algorithme calculant le pageRank
# Il y a une convergence après 20 itérations
for (i in 1:3)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
article422908 <- t(m["422908",])
article422908
articlesRecommandes <- page * article422908
articlesRecommandes <- pageRank * article422908
ncol(pageRank)
nrow(pageRank)
length(article422908)
articlesRecommandes <- pageRank * article422908
articlesRecommandes <- pageRank*article422908
articlesRecommandes <- article422908 * pageRank
article422908[1,]
article422908[,1]
nrow(article422908)
ncol(article422908)
article422908 <- m["422908",]
article422908 <- t(article422908)
articlesRecommandes <- pageRank * article422908
articlesRecommandes <- article422908 * pageRank
for (i in 1:2)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
article422908 <- m["422908",]
article422908 <- t(article422908)
# On souhaite recommander les articles les plus proche de l'article N°422908
articlesRecommandes <- pageRank * article422908
article422908
article422908 <- m["422908",]
article422908
articlesRecommandes <- pageRank * article422908
# On trie la liste par ordre décroissant
articlesRecommandes <- head(articlesRecommandes[order(-articlesRecommandes), ,drop = FALSE], sum(article422908))
articlesRecommandes
article422908 <- m["422908",]
articlesRecommandes <- pageRank * article422908
articlesRecommandes
sort(x = articlesRecommandes, decreasing = TRUE)
articlesRecommandes <- sort(articlesRecommandes, decreasing = TRUE)
rownames(articlesRecommandes)
articlesRecommandes
colnames(articlesRecommandes)
article422908
article422908[1]
article422908[2]
nrow(article422908)
ncol(article422908)
referencesArticle422908 <- article422908
for (k in 1:ncol(referencesArticle422908)){
if (article422908[k]==1) {
referencesArticle422908 <- referencesArticle422908 + m[k,]
}
}
# Un article ne peut pas être référencé plus d'une fois dans le même article
referencesArticle422908[referencesArticle422908 >= 1] <- 1
# On souhaite recommander les articles les plus proche de l'article N°422908 présents dans les références des références à l'article N°422908
newArticlesRecommandes <- pageRank * referencesArticle422908
# On trie la liste par ordre décroissant
newArticlesRecommandes <- sort(newArticlesRecommandes, decreasing = TRUE)
# On récupère les numéros des articles
rownames(newArticlesRecommandes)
referencesArticle422908 <- article422908
for (k in 1:ncol(referencesArticle422908)){
if (article422908[k]==1) {
referencesArticle422908 <- referencesArticle422908 + m[k,]
}
}
referencesArticle422908[referencesArticle422908 >= 1] <- 1
referencesArticle422908
newArticlesRecommandes <- pageRank * referencesArticle422908
newArticlesRecommandes
newArticlesRecommandes <- sort(newArticlesRecommandes, decreasing = TRUE)
newArticlesRecommandes
rownames(newArticlesRecommandes)
colnames(newArticlesRecommandes)
colnames(articlesRecommandes, 20)
colnames(articlesRecommandes[1..20])
colnames(head(articlesRecommandes,20))
head(colnames(articlesRecommandes))
head(colnames(articlesRecommandes), 20)
pageRank <- matrix(1.0, nrow = nrow(m), ncol = ncol(m))
rownames(pageRank) <- rownames(m)
colnames(pageRank) <- colnames(m)
dVector <- rep(d, N)
# Algorithme calculant le pageRank
# Il y a une convergence après x itérations
for (i in 1:20)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
article422908 <- as.matrix(m[422908,])
articlesSimilairesCos <- m %*% t(article422908) / (sqrt(sum(article422908 * article422908)) * sqrt(rowSums(m * m)))
articlesSimilairesCos <- m * t(article422908) / (sqrt(sum(article422908 * article422908)) * sqrt(rowSums(m * m)))
# on affiche les résultats obtenus
max.nindex(articlesSimilairesCos)
articlesSimilairesCor <- cor(t(m), article422908, use='pairwise.complete.obs', method='pearson')
max.nindex(articlesSimilairesCor)
referencesArticle422908 <- article422908
for (k in 1:ncol(referencesArticle422908)){
if (article422908[k]==1) {
referencesArticle422908 <- referencesArticle422908 + m[k,]
}
}
m <- read.table("http://www.groupes.polymtl.ca/log6308/Public/citeseer.rtable")
d <- 0.85
# N <- 1
N <- nrow(m) # nombre d'articles total
# Calcul du nombre de références pour chaque page
nombreReferences <- apply(m,1,sum)
# On assigne 1 à chaque article sans référence pour éviter une division par zéro dans l'algorithme
nombreReferences[nombreReferences == 0] <- 1
# Comme l'algorithme PageRank est récurssif et que deux articles peuvent s'auto-référer on initialise les valeurs PageRank à 1
pageRank <- matrix(1.0, nrow = nrow(m), ncol = ncol(m))
rownames(pageRank) <- rownames(m)
colnames(pageRank) <- colnames(m)
dVector <- rep(d, N)
# Algorithme calculant le pageRank
# Il y a une convergence après x itérations
for (i in 1:20)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank
article422908 <- m["422908",]
articlesRecommandes <- pageRank * article422908
# On trie la liste par ordre décroissant
articlesRecommandes <- sort(articlesRecommandes, decreasing = TRUE)
# On récupère les numéros des articles
head(colnames(articlesRecommandes), 20)
referencesArticle422908 <- article422908
for (k in 1:ncol(referencesArticle422908)){
if (article422908[k]==1) {
referencesArticle422908 <- referencesArticle422908 + m[k,]
}
}
referencesArticle422908[referencesArticle422908 >= 1] <- 1
# On souhaite recommander les articles les plus proche de l'article N°422908 présents dans les références des références à l'article N°422908
newArticlesRecommandes <- pageRank * referencesArticle422908
# On trie la liste par ordre décroissant
newArticlesRecommandes <- sort(newArticlesRecommandes, decreasing = TRUE)
# On récupère les numéros des articles
head(colnames(newArticlesRecommandes), 20)
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
article422908 <- as.matrix(m[422908,])
articlesSimilairesCos <- m * t(article422908) / (sqrt(sum(article422908 * article422908)) * sqrt(rowSums(m * m)))
# on affiche les résultats obtenus
max.nindex(articlesSimilairesCos)
articlesSimilairesCor <- cor(t(m), article422908, use='pairwise.complete.obs', method='pearson')
article422908 <- as.matrix(m[422908,])
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
(v %*% m)/(n * sqrt(sum(v^2)))
}
# on calcule les similitudes avec la méthode du cosinus
articlesSimilairesCos <- cosinus.vm(article422908, m)
article422908
m[422908,]
m <- read.table("http://www.groupes.polymtl.ca/log6308/Public/citeseer.rtable")
m
m[422908,]
m["422908",]
article422908 <- as.matrix(m["422908",])
article422908
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
(v %*% m)/(n * sqrt(sum(v^2)))
}
# on calcule les similitudes avec la méthode du cosinus
articlesSimilairesCos <- cosinus.vm(article422908, m)
max.nindex(articlesSimilairesCos)
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
(v * m)/(n * sqrt(sum(v^2)))
}
# on calcule les similitudes avec la méthode du cosinus
articlesSimilairesCos <- cosinus.vm(article422908, m)
#m * t(article422908) / (sqrt(sum(article422908 * article422908)) * sqrt(rowSums(m * m)))
# on affiche les résultats obtenus
max.nindex(articlesSimilairesCos)
articlesSimilairesCor <- cor(article422908, m, use='pairwise.complete.obs', method='pearson')
articlesSimilairesCor <- cor(m, article422908, use='pairwise.complete.obs', method='pearson')
nrow(n)
nrow(m)
nrow(article422908)
ncol(article422908)
ncol(m)
articlesSimilairesCor <- cor(t(m), article422908, use='pairwise.complete.obs', method='pearson')
articlesSimilairesCor <- cor(t(m), article422908, use='pairwise.complete.obs')
articlesSimilairesCor <- cor(t(m), t(article422908), use='pairwise.complete.obs', method='pearson')
articlesSimilairesCor <- cor(m, t(article422908), use='pairwise.complete.obs', method='pearson')
articlesSimilairesCor <- cor(t(article422908), m, use='pairwise.complete.obs', method='pearson')
max.nindex(articlesSimilairesCos)
referencesArticle422908 <- article422908
for (k in 1:ncol(referencesArticle422908)){
if (article422908[k]==1) {
referencesArticle422908 <- referencesArticle422908 + m[k,]
}
}
for (i in 1:15)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank
for (i in 1:10)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank <- matrix(1.0, nrow = nrow(m), ncol = ncol(m))
rownames(pageRank) <- rownames(m)
colnames(pageRank) <- colnames(m)
dVector <- rep(d, N)
# Algorithme calculant le pageRank
# Il y a une convergence après x itérations
# Il faut être patient le for peut prendre du temps
for (i in 1:15)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank
pageRank <- matrix(1.0, nrow = nrow(m), ncol = ncol(m))
rownames(pageRank) <- rownames(m)
colnames(pageRank) <- colnames(m)
dVector <- rep(d, N)
# Algorithme calculant le pageRank
# Il y a une convergence après x itérations
# Il faut être patient le for peut prendre du temps
for (i in 1:10)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank
head(pageRank)
pageRank <- matrix(1.0, nrow = nrow(m), ncol = ncol(m))
pageRank
rownames(pageRank) <- rownames(m)
colnames(pageRank) <- colnames(m)
dVector <- rep(d, N)
# Algorithme calculant le pageRank
# Il y a une convergence après x itérations
# Il faut être patient le for peut prendre du temps
for (i in 1:5)
{
pageRank <- (1 - dVector) / N +   as.matrix(d * t(m)) %*% (pageRank / nombreReferences)
}
pageRank
library(Matrix)
# m : lignes correspondent aux articles - colonnes correspondent aux articles réfèrés
# 1 si l'article ligne i refère à l'article ligne j
# 0 sinon
m <- read.table("http://www.groupes.polymtl.ca/log6308/Public/citeseer.rtable")
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2))
(v %*% m)/(n * sqrt(sum(v^2)))
}
max.nindex <- function(m, n=5) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
min.nindex <- function(m, n=5) {
i <- order(m)
return(i[1:n])
}
m.na <- m
m.na[m.na == 0] <- NA
n.voisins <- 20 + 1
distance.article422908 <- sqrt(colSums((m[,"X422908"] - m)^2))
i.distance.article422908 <- min.nindex(distance.article422908, n.voisins)
i.voisins <- i.distance.article422908[names(distance.article422908[i.distance.article422908]) != "X422908"]
wcos.voisins <- cosinus.vm(m[,"X422908"], m[,i.voisins])
dim(m[,"X422908"])
dim(as.matrix(m[,"X422908"]))
wcos.voisins <- cosinus.vm(as.matrix(m[,"X422908"]), m[,i.voisins])
dim(t(m[,"X422908"]))
dim(t(t(m[,"X422908"])))
wcos.voisins <- cosinus.vm(t(t(m[,"X422908"])), m[,i.voisins])
dim(m[,i.voisins])
as.vector(m[,"X422908"])
wcos.voisins <- cosinus.vm(as.vector(m[,"X422908"]), m[,i.voisins])
m[,i.voisins]
as.array(m[,"X422908"])
wcos.voisins <- cosinus.vm(as.array(m[,"X422908"]), m[,i.voisins])
test <- m[,i.voisins]
test
test[test == 0] <- NA
test
wcos.voisins <- cosinus.vm(m[,"X422908"], m[,i.voisins])
wcor <- cor(m[,"X422908"], m[,i.voisins], use='pairwise.complete.obs', method='pearson')
max.nindex(wcor, 6)
wcos.voisins <- cosinus.vm(m[,"X422908"], test)#m[,i.voisins]
test
wcor <- cor(m[,"X422908"], m[,i.voisins], use='pairwise.complete.obs', method='pearson')
max.nindex(wcor, 6)
mX422908 <- m[,"X422908"]
mX422908
mX422908[1]
library(Matrix)
# m : lignes correspondent aux articles - colonnes correspondent aux articles réfèrés
# 1 si l'article ligne i refère à l'article ligne j
# 0 sinon
m <- read.table("http://www.groupes.polymtl.ca/log6308/Public/citeseer.rtable")
max.nindex <- function(m, n=20) {
i <- m[order(-m), ,drop = FALSE]
i <- rownames(i)
return(i[1:n])
}
# Itemisation
i422908.q2 <- as.matrix((m["422908",]))
m.q2 <- as.matrix(m)
# Application du cosinus et renvoi des 20 premiers r?sultats
i422908.cos <- (m.q2 %*% t(i422908.q2)) / sqrt(sum(i422908.q2^2)) / sqrt(rowSums(m.q2^2))
resultat.cos <- max.nindex(i422908.cos)
resultat.cos
i422908 <- as.matrix((m["422908",]))
matrice <- as.matrix(m)
# Application du cosinus et renvoi des 20 premiers r?sultats
i422908.cos <- (matrice %*% t(i422908)) / sqrt(sum(i422908^2)) / sqrt(rowSums(matrice^2))
resultat.cos <- max.nindex(i422908.cos)
max.nindex(i422908.cos)
library(Matrix)
m <- read.table("http://www.groupes.polymtl.ca/log6308/Public/citeseer.rtable")
d <- 0.85
# nombre d'articles total
N <- nrow(m)
# Calcul du nombre de réfèrences sortantes pour chaque page
s <- apply(m,1,sum)
# On remplace les 0 par des 1 pour éviter une divisions par zéro dans l'algorithme
# Ces valeurs ne seront de toutes façons pas considérées puisque les D_i réfèrent A et ont donc au moins une référence
s[s==0] <- 1
# Comme l'algorithme PageRank est récurssif et que deux articles peuvent s'auto-référer on initialise les valeurs PageRank à 1
r <- numeric(N) + 1
# Vecteur d'amortissement
dVector <- rep(d, N)
# matrice d'adjacence
A <- t(m)
# Algorithme calculant le pageRank en matriciel : r = (1 - dVector) / N + d * A %*% (r/s)
pageRank <- function(r, A, s, N, d, dVector) {
res <- (1 - dVector) / N + d * A %*% (r / s)
# Si on a convergé, on retourne le pageRank
if(all(res == r)) {
return(res);
}
# Sinon on calcule recursivement
return(pageRank(res, A, s, N, d, dVector))
}
# On calcule le pageRank pour tous les articles
pr <- pageRank(r, A, s, N, d, dVector)
# On récupèe l'article 422908
article422908 <- m["422908",]
# Il y a 17 articles référés par 422908
sum(article422908)
# On va d'abord recommander les 5 articles ayant le meilleur pagerank parmis les recommandation de 422908
# On récupère uniquement les pageRank des articles référés par 422908
articlesRecommandes <- pr * article422908
# On trie la liste par ordre décroissant
articlesRecommandes <- sort(articlesRecommandes, decreasing = TRUE)
# On récupère les numéros des 5 articles recommandés et on les affiche
head(colnames(articlesRecommandes), 5)
# Autre approche : on cherche toutes les références des références
# On calcule le vecteurs regroupant toutes les références
referencesArticle422908 <- article422908
for (k in 1:ncol(referencesArticle422908)){
# si k est référencé par 422908
if (article422908[k]==1) {
# ici on ajoute les références de l'article k
referencesArticle422908 <- referencesArticle422908 + m[k,]
}
}
# Comme on a sommé précédemment les références, on s'assure qu'il n'y a que des 1 et des 0
referencesArticle422908[referencesArticle422908 >= 1] <- 1
# On souhaite recommander les articles les plus proche de l'article N°422908 présents dans les références des références à l'article N°422908
newArticlesRecommandes <- pr * referencesArticle422908
# On trie la liste par ordre décroissant
newArticlesRecommandes <- sort(newArticlesRecommandes, decreasing = TRUE)
# On récupère les numéros des articles
head(colnames(newArticlesRecommandes), 5)
max.nindex <- function(m, n=20) {
i <- m[order(-m), ,drop = FALSE]
i <- rownames(i)
return(i[1:n])
}
i422908 <- as.matrix((m["422908",]))
matrice <- as.matrix(m)
# Application du cosinus et renvoie des 20 premiers résultats
i422908.cos <- (matrice %*% t(i422908)) / sqrt(sum(i422908^2)) / sqrt(rowSums(matrice^2))
max.nindex(i422908.cos)
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
u.data
m.sparse <- sparseMatrix(u.data[,1],u.data[,5],x=u.data[,2])
library(Matrix)
m.sparse <- sparseMatrix(u.data[,1],u.data[,5],x=u.data[,2])
setwd('/Users/thomasmac/LOG6308_TP1') # à modifier selon la machine
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.data
head(u.data)
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
u.data
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
u.data
head(u.data)
m.sparse <- sparseMatrix(u.data[,1],u.data[,5],x=u.data[,2])
setwd('/Users/thomasmac/LOG6308_TP1') # à modifier selon la machine
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
head(u.data)
u.data[u.data$user.id=0]
u.data[u.data$user.id=1]
u.data[u.data$user.id==1]
u.data[u.data$user.id]
u.data[u.data$user.id=1,]
u.data$user.id = 1
setwd('/Users/thomasmac/LOG6308_TP1') # à modifier selon la machine
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.data[u.data$user.id == 1]
u.data[u.data$user.id == 2]
u.data[u.data$user.id == 2,]
u.data[u.data$user.id == 1,]
u.data[u.data$user.id == 0,]
u.data[u.data$item.id == 0,]
u.data[u.data$item.id == 1,]
library(Matrix)
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
head(u.data)
m.sparse <- sparseMatrix(u.data[,1],u.data[,5],x=u.data[,2])
setwd('/Users/thomasmac/LOG6308_TP1') # à modifier selon la machine
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.data[u.data$user.id=1,]
u.data[u.data$user.id==1,]
nrow(u.data[u.data$user.id==1,])
nrow(u.data[u.data$user.id==2,])
nrow(u.data[u.data$user.id==3,])
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
head(u.data)
m.sparse <- sparseMatrix(u.data[,1],u.data[,5],x=u.data[,2])
m.sparse <- sparseMatrix(u.data[,1],u.data[,2],x=u.data[,3])
setwd('/Users/thomasmac/LOG6308_TP1') # à modifier selon la machine
u.data <- read.csv(file='u.data.csv', sep='|', header=T)
u.data
head(u.data)
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
head(u.data)
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
m.sparse <- sparseMatrix(u.data[,1],u.data[,2],x=u.data[,3])
head(u.data)
m.sparse
rownames(m) <- paste('u', 1:nrow(m), sep='')
colnames(m) <- paste('i', 1:ncol(m), sep='')
m <- as.matrix(m.sparse)
head(m)
m[m==0] <- NA
head(m)
head(u.data)
u.data[u.data$user_id==7,]
u.data[u.data$user_id==6,]
setwd('/Applications/XCodeProjects/RecommendingWeb/DataCreator') # à modifier selon la machine
u.data <- read.csv(file='data.csv', sep=',', header=T)
m.sparse <- sparseMatrix(u.data[,1],u.data[,2],x=u.data[,3])
rownames(m) <- paste('u', 1:nrow(m), sep='')
colnames(m) <- paste('i', 1:ncol(m), sep='')
m <- as.matrix(m.sparse)
m[m==0] <- NA
head(m)
head(m.sparse)
head(u.data)
